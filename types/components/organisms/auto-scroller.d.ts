export class AutoScroller extends Html {
    constructor(header: any, container: any, sceneClassName: any);
    lastSelectedOption: any;
    optionsArray: any[];
    conversionLabels: any[];
    sceneClassName: any;
    mobileSize: number;
    touch: boolean;
    scrollMode: any;
    container: any;
    header: any;
    init(): void;
    number: number;
    id: string;
    setupBinds(): void;
    mouseBind: any;
    keyBind: any;
    resizeBind: any;
    scrollBind: any;
    addMouseWheelSupport(): void;
    mouseWheel(delta: any): void;
    removeMouseWheel(): void;
    addKeyboardSupport(): void;
    keyPress(e: any): void;
    removeKeyPress(): void;
    remove(): void;
    addResizeEvent(): void;
    removeResizeEvent(): void;
    getScrollMode(): any;
    setScrollModeBySize(): void;
    setScrollMode(mode: any): void;
    getContainerScenePanels(): any[];
    setupOptions(): void;
    setupBreadCrumbContainer(): void;
    crumbContainer: object;
    createCrumb(tmpOption: any): object;
    getCrumbClass(tmpOption: any): "option selected" | "option";
    updateCrumbStyles(): void;
    setupScrollPointer(): void;
    scrollPointer: object;
    selectPanel(tmpOption: any): void;
    getPanelClass(lastNum: any, currentNum: any): {
        selecting: string;
        removing: string;
    };
    showSelectedPanel(tmpOption: any): void;
    scrollToSelectedPanel(tmpOption: any): void;
    addScroll(): void;
    removeScroll(): void;
    checkScroll(): void;
    showAllPanels(): void;
    setup(): void;
    reset(): void;
    addOption(panel: any): void;
    selectLastOption(): boolean;
    getSelectedOption(): any;
    createClickHandler(option: any): () => void;
    selectOptionByNumber(number: any): void;
    selectOption(tmpOption: any, scrollUpdate: any): void;
    updateHeaderClass(numberSelected: any): void;
    checkToAddScrollPointer(numberSelected: any): void;
    getNextOption(lastOptionNumber: any): any;
    selectNextOption(): void;
    getPreviousOption(lastOptionNumber: any): any;
    selectPreviousOption(): void;
    setLastSelectedOption(option: any): void;
    unselectOption(tmpOption: any): void;
    update(): void;
    stopClickEvents(e: any): void;
}
import { Html } from '@base-framework/base';
